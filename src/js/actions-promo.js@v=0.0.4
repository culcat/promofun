/*!
 * clipboard.js v2.0.4
 * https://zenorocha.github.io/clipboard.js
 * 
 * Licensed MIT Â© Zeno Rocha
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ClipboardJS"] = factory();
	else
		root["ClipboardJS"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _clipboardAction = __webpack_require__(1);

var _clipboardAction2 = _interopRequireDefault(_clipboardAction);

var _tinyEmitter = __webpack_require__(3);

var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);

var _goodListener = __webpack_require__(4);

var _goodListener2 = _interopRequireDefault(_goodListener);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Base class which takes one or more elements, adds event listeners to them,
 * and instantiates a new `ClipboardAction` on each click.
 */
var Clipboard = function (_Emitter) {
    _inherits(Clipboard, _Emitter);

    /**
     * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
     * @param {Object} options
     */
    function Clipboard(trigger, options) {
        _classCallCheck(this, Clipboard);

        var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));

        _this.resolveOptions(options);
        _this.listenClick(trigger);
        return _this;
    }

    /**
     * Defines if attributes would be resolved using internal setter functions
     * or custom functions that were passed in the constructor.
     * @param {Object} options
     */


    _createClass(Clipboard, [{
        key: 'resolveOptions',
        value: function resolveOptions() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
            this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
            this.text = typeof options.text === 'function' ? options.text : this.defaultText;
            this.container = _typeof(options.container) === 'object' ? options.container : document.body;
        }

        /**
         * Adds a click event listener to the passed trigger.
         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
         */

    }, {
        key: 'listenClick',
        value: function listenClick(trigger) {
            var _this2 = this;

            this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
                return _this2.onClick(e);
            });
        }

        /**
         * Defines a new `ClipboardAction` on each click event.
         * @param {Event} e
         */

    }, {
        key: 'onClick',
        value: function onClick(e) {
            var trigger = e.delegateTarget || e.currentTarget;

            if (this.clipboardAction) {
                this.clipboardAction = null;
            }

            this.clipboardAction = new _clipboardAction2.default({
                action: this.action(trigger),
                target: this.target(trigger),
                text: this.text(trigger),
                container: this.container,
                trigger: trigger,
                emitter: this
            });
        }

        /**
         * Default `action` lookup function.
         * @param {Element} trigger
         */

    }, {
        key: 'defaultAction',
        value: function defaultAction(trigger) {
            return getAttributeValue('action', trigger);
        }

        /**
         * Default `target` lookup function.
         * @param {Element} trigger
         */

    }, {
        key: 'defaultTarget',
        value: function defaultTarget(trigger) {
            var selector = getAttributeValue('target', trigger);

            if (selector) {
                return document.querySelector(selector);
            }
        }

        /**
         * Returns the support of the given action, or all actions if no action is
         * given.
         * @param {String} [action]
         */

    }, {
        key: 'defaultText',


        /**
         * Default `text` lookup function.
         * @param {Element} trigger
         */
        value: function defaultText(trigger) {
            return getAttributeValue('text', trigger);
        }

        /**
         * Destroy lifecycle.
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.listener.destroy();

            if (this.clipboardAction) {
                this.clipboardAction.destroy();
                this.clipboardAction = null;
            }
        }
    }], [{
        key: 'isSupported',
        value: function isSupported() {
            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];

            var actions = typeof action === 'string' ? [action] : action;
            var support = !!document.queryCommandSupported;

            actions.forEach(function (action) {
                support = support && !!document.queryCommandSupported(action);
            });

            return support;
        }
    }]);

    return Clipboard;
}(_tinyEmitter2.default);

/**
 * Helper function to retrieve attribute value.
 * @param {String} suffix
 * @param {Element} element
 */


function getAttributeValue(suffix, element) {
    var attribute = 'data-clipboard-' + suffix;

    if (!element.hasAttribute(attribute)) {
        return;
    }

    return element.getAttribute(attribute);
}

module.exports = Clipboard;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _select = __webpack_require__(2);

var _select2 = _interopRequireDefault(_select);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Inner class which performs selection from either `text` or `target`
 * properties and then executes copy or cut operations.
 */
var ClipboardAction = function () {
    /**
     * @param {Object} options
     */
    function ClipboardAction(options) {
        _classCallCheck(this, ClipboardAction);

        this.resolveOptions(options);
        this.initSelection();
    }

    /**
     * Defines base properties passed from constructor.
     * @param {Object} options
     */


    _createClass(ClipboardAction, [{
        key: 'resolveOptions',
        value: function resolveOptions() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this.action = options.action;
            this.container = options.container;
            this.emitter = options.emitter;
            this.target = options.target;
            this.text = options.text;
            this.trigger = options.trigger;

            this.selectedText = '';
        }

        /**
         * Decides which selection strategy is going to be applied based
         * on the existence of `text` and `target` properties.
         */

    }, {
        key: 'initSelection',
        value: function initSelection() {
            if (this.text) {
                this.selectFake();
            } else if (this.target) {
                this.selectTarget();
            }
        }

        /**
         * Creates a fake textarea element, sets its value from `text` property,
         * and makes a selection on it.
         */

    }, {
        key: 'selectFake',
        value: function selectFake() {
            var _this = this;

            var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

            this.removeFake();

            this.fakeHandlerCallback = function () {
                return _this.removeFake();
            };
            this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;

            this.fakeElem = document.createElement('textarea');
            // Prevent zooming on iOS
            this.fakeElem.style.fontSize = '12pt';
            // Reset box model
            this.fakeElem.style.border = '0';
            this.fakeElem.style.padding = '0';
            this.fakeElem.style.margin = '0';
            // Move element out of screen horizontally
            this.fakeElem.style.position = 'absolute';
            this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
            // Move element to the same position vertically
            var yPosition = window.pageYOffset || document.documentElement.scrollTop;
            this.fakeElem.style.top = yPosition + 'px';

            this.fakeElem.setAttribute('readonly', '');
            this.fakeElem.value = this.text;

            this.container.appendChild(this.fakeElem);

            this.selectedText = (0, _select2.default)(this.fakeElem);
            this.copyText();
        }

        /**
         * Only removes the fake element after another click event, that way
         * a user can hit `Ctrl+C` to copy because selection still exists.
         */

    }, {
        key: 'removeFake',
        value: function removeFake() {
            if (this.fakeHandler) {
                this.container.removeEventListener('click', this.fakeHandlerCallback);
                this.fakeHandler = null;
                this.fakeHandlerCallback = null;
            }

            if (this.fakeElem) {
                this.container.removeChild(this.fakeElem);
                this.fakeElem = null;
            }
        }

        /**
         * Selects the content from element passed on `target` property.
         */

    }, {
        key: 'selectTarget',
        value: function selectTarget() {
            this.selectedText = (0, _select2.default)(this.target);
            this.copyText();
        }

        /**
         * Executes the copy operation based on the current selection.
         */

    }, {
        key: 'copyText',
        value: function copyText() {
            var succeeded = void 0;

            try {
                succeeded = document.execCommand(this.action);
            } catch (err) {
                succeeded = false;
            }

            this.handleResult(succeeded);
        }

        /**
         * Fires an event based on the copy operation result.
         * @param {Boolean} succeeded
         */

    }, {
        key: 'handleResult',
        value: function handleResult(succeeded) {
            this.emitter.emit(succeeded ? 'success' : 'error', {
                action: this.action,
                text: this.selectedText,
                trigger: this.trigger,
                clearSelection: this.clearSelection.bind(this)
            });
        }

        /**
         * Moves focus away from `target` and back to the trigger, removes current selection.
         */

    }, {
        key: 'clearSelection',
        value: function clearSelection() {
            if (this.trigger) {
                this.trigger.focus();
            }

            window.getSelection().removeAllRanges();
        }

        /**
         * Sets the `action` to be performed which can be either 'copy' or 'cut'.
         * @param {String} action
         */

    }, {
        key: 'destroy',


        /**
         * Destroy lifecycle.
         */
        value: function destroy() {
            this.removeFake();
        }
    }, {
        key: 'action',
        set: function set() {
            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';

            this._action = action;

            if (this._action !== 'copy' && this._action !== 'cut') {
                throw new Error('Invalid "action" value, use either "copy" or "cut"');
            }
        }

        /**
         * Gets the `action` property.
         * @return {String}
         */
        ,
        get: function get() {
            return this._action;
        }

        /**
         * Sets the `target` property using an element
         * that will be have its content copied.
         * @param {Element} target
         */

    }, {
        key: 'target',
        set: function set(target) {
            if (target !== undefined) {
                if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
                    if (this.action === 'copy' && target.hasAttribute('disabled')) {
                        throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    }

                    if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                        throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                    }

                    this._target = target;
                } else {
                    throw new Error('Invalid "target" value, use a valid Element');
                }
            }
        }

        /**
         * Gets the `target` property.
         * @return {String|HTMLElement}
         */
        ,
        get: function get() {
            return this._target;
        }
    }]);

    return ClipboardAction;
}();

module.exports = ClipboardAction;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

function select(element) {
    var selectedText;

    if (element.nodeName === 'SELECT') {
        element.focus();

        selectedText = element.value;
    }
    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
        var isReadOnly = element.hasAttribute('readonly');

        if (!isReadOnly) {
            element.setAttribute('readonly', '');
        }

        element.select();
        element.setSelectionRange(0, element.value.length);

        if (!isReadOnly) {
            element.removeAttribute('readonly');
        }

        selectedText = element.value;
    }
    else {
        if (element.hasAttribute('contenteditable')) {
            element.focus();
        }

        var selection = window.getSelection();
        var range = document.createRange();

        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);

        selectedText = selection.toString();
    }

    return selectedText;
}

module.exports = select;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var is = __webpack_require__(5);
var delegate = __webpack_require__(6);

/**
 * Validates all params and calls the right
 * listener function based on its target type.
 *
 * @param {String|HTMLElement|HTMLCollection|NodeList} target
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listen(target, type, callback) {
    if (!target && !type && !callback) {
        throw new Error('Missing required arguments');
    }

    if (!is.string(type)) {
        throw new TypeError('Second argument must be a String');
    }

    if (!is.fn(callback)) {
        throw new TypeError('Third argument must be a Function');
    }

    if (is.node(target)) {
        return listenNode(target, type, callback);
    }
    else if (is.nodeList(target)) {
        return listenNodeList(target, type, callback);
    }
    else if (is.string(target)) {
        return listenSelector(target, type, callback);
    }
    else {
        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
    }
}

/**
 * Adds an event listener to a HTML element
 * and returns a remove listener function.
 *
 * @param {HTMLElement} node
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNode(node, type, callback) {
    node.addEventListener(type, callback);

    return {
        destroy: function() {
            node.removeEventListener(type, callback);
        }
    }
}

/**
 * Add an event listener to a list of HTML elements
 * and returns a remove listener function.
 *
 * @param {NodeList|HTMLCollection} nodeList
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNodeList(nodeList, type, callback) {
    Array.prototype.forEach.call(nodeList, function(node) {
        node.addEventListener(type, callback);
    });

    return {
        destroy: function() {
            Array.prototype.forEach.call(nodeList, function(node) {
                node.removeEventListener(type, callback);
            });
        }
    }
}

/**
 * Add an event listener to a selector
 * and returns a remove listener function.
 *
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenSelector(selector, type, callback) {
    return delegate(document.body, selector, type, callback);
}

module.exports = listen;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

/**
 * Check if argument is a HTML element.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.node = function(value) {
    return value !== undefined
        && value instanceof HTMLElement
        && value.nodeType === 1;
};

/**
 * Check if argument is a list of HTML elements.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.nodeList = function(value) {
    var type = Object.prototype.toString.call(value);

    return value !== undefined
        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
        && ('length' in value)
        && (value.length === 0 || exports.node(value[0]));
};

/**
 * Check if argument is a string.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.string = function(value) {
    return typeof value === 'string'
        || value instanceof String;
};

/**
 * Check if argument is a function.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.fn = function(value) {
    var type = Object.prototype.toString.call(value);

    return type === '[object Function]';
};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var closest = __webpack_require__(7);

/**
 * Delegates event to a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function _delegate(element, selector, type, callback, useCapture) {
    var listenerFn = listener.apply(this, arguments);

    element.addEventListener(type, listenerFn, useCapture);

    return {
        destroy: function() {
            element.removeEventListener(type, listenerFn, useCapture);
        }
    }
}

/**
 * Delegates event to a selector.
 *
 * @param {Element|String|Array} [elements]
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function delegate(elements, selector, type, callback, useCapture) {
    // Handle the regular Element usage
    if (typeof elements.addEventListener === 'function') {
        return _delegate.apply(null, arguments);
    }

    // Handle Element-less usage, it defaults to global delegation
    if (typeof type === 'function') {
        // Use `document` as the first parameter, then apply arguments
        // This is a short way to .unshift `arguments` without running into deoptimizations
        return _delegate.bind(null, document).apply(null, arguments);
    }

    // Handle Selector-based usage
    if (typeof elements === 'string') {
        elements = document.querySelectorAll(elements);
    }

    // Handle Array-like based usage
    return Array.prototype.map.call(elements, function (element) {
        return _delegate(element, selector, type, callback, useCapture);
    });
}

/**
 * Finds closest match and invokes callback.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Function}
 */
function listener(element, selector, type, callback) {
    return function(e) {
        e.delegateTarget = closest(e.target, selector);

        if (e.delegateTarget) {
            callback.call(element, e);
        }
    }
}

module.exports = delegate;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

var DOCUMENT_NODE_TYPE = 9;

/**
 * A polyfill for Element.matches()
 */
if (typeof Element !== 'undefined' && !Element.prototype.matches) {
    var proto = Element.prototype;

    proto.matches = proto.matchesSelector ||
                    proto.mozMatchesSelector ||
                    proto.msMatchesSelector ||
                    proto.oMatchesSelector ||
                    proto.webkitMatchesSelector;
}

/**
 * Finds the closest parent that matches a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @return {Function}
 */
function closest (element, selector) {
    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
        if (typeof element.matches === 'function' &&
            element.matches(selector)) {
          return element;
        }
        element = element.parentNode;
    }
}

module.exports = closest;


/***/ })
/******/ ]);
});
/*! Scrollyeah - v0.3.2 - 2014-04-11
* https://github.com/artpolikarpov/scrollyeah
* Copyright (c) 2014 Artem Polikarpov; Licensed MIT */
!function(a){function b(b){var c=b||window.event,d=[].slice.call(arguments,1),e=0,f=0,g=0;return b=a.event.fix(c),b.type="mousewheel",b.wheelDelta&&(e=b.wheelDelta/120),b.detail&&(e=-b.detail/3),g=e,void 0!==c.axis&&c.axis===c.HORIZONTAL_AXIS&&(g=0,f=-1*e),void 0!==c.wheelDeltaY&&(g=c.wheelDeltaY/120),void 0!==c.wheelDeltaX&&(f=-1*c.wheelDeltaX/120),d.unshift(b,e,f,g),a.event.dispatch.apply(this,d)}function c(a){for(var b={},c=0;c<n.length;c++){var d=n[c][0],e=n[c][1];if(a){var f=a.attr("data-"+d);f&&("number"==e?(f=Number(f),isNaN(f)||(b[d]=f)):"boolean"==e?"true"==f?b[d]=!0:(f="false")&&(b[d]=!1):"string"==e&&(b[d]=f))}else b[d]=n[c][2]}return b}function d(a){return{left:a}}function e(b,c){function e(a,b){var c=A-(A-B)/2;return(a-c)*b.data("parallax")}function f(){return!1}function n(a){clearTimeout(a.data("backAnimate"))}function o(a,e,f,g,h){var i=isNaN(e)?0:e;n(a),g&&(i=g,a.data({backAnimate:setTimeout(function(){o(a,e,Math.max(k,f/2),!1,h)},f)})),a.stop().animate(d(i),f,j),!h&&c.triggerScrollyeah&&(clearInterval(G),G=setInterval(function(){b.trigger("scrollyeah",w.position()[K])},25),clearTimeout(H),H=setTimeout(function(){clearInterval(G)},f+100))}function p(a,e,f){return n(e),e.stop(),a===!1&&(a=e.position()[K]),e.css(d(a)),f?void 0:(C=a,c.triggerScrollyeah&&b.trigger("scrollyeah",C),C)}function q(a){x>y?(D=!0,b.addClass("scrollyeah_active"),c.shadows&&(b.addClass("scrollyeah_shadow"),B>=a?b.removeClass("scrollyeah_shadow_no-left").addClass("scrollyeah_shadow_no-right"):a>=A?b.removeClass("scrollyeah_shadow_no-right").addClass("scrollyeah_shadow_no-left"):b.removeClass("scrollyeah_shadow_no-left scrollyeah_shadow_no-right"))):(c.disableIfFit?(D=!1,b.removeClass("scrollyeah_active")):(D=!0,b.addClass("scrollyeah_active")),c.shadows&&b.removeClass("scrollyeah_shadow"))}function r(){x=w.width(),y=b.width(),z=b.height(),A=c.centerIfFit?Math.max((y-x)/2,0):0,B=Math.min(-(x-y),A),w.data({maxPos:A,minPos:B}),B>C&&p(B,w),C>A&&p(A,w),E.each(function(){var b=a(this);p(e(C,b),b,!0)}),q(C)}function s(f,j,k){function l(b){function c(){y=(new Date).getTime(),u=s,v=t,J=[[y,s]],x=p(!1,w),E.each(function(){var b=a(this);p(e(C,b),b,!0)}),f()}if((g||b.which<2)&&D)if(g){if(g&&1==b.targetTouches.length)s=b.targetTouches[0][L],t=b.targetTouches[0][M],c(),w[0].addEventListener("touchmove",o,!1),w[0].addEventListener("touchend",r,!1);else if(g&&b.targetTouches.length>1)return!1}else s=b[L],b.preventDefault(),c(),m.bind("mousemove.scrollyeah",o),m.bind("mouseup.scrollyeah",r)}function n(f,g,h,i){return Math.abs(h)>Math.abs(i)?(f.preventDefault(),clearTimeout(H),I||(p(!1,w),E.each(function(){var b=a(this);p(e(C,b),b,!0)}),I=!0),H=setTimeout(function(){I=!1},100),C-=Math.round(25*h),B>C&&(C=B),C>A&&(C=A),w.css(d(C)),c.triggerScrollyeah&&b.trigger("scrollyeah",C),E.each(function(){var b=a(this);b.css(d(e(C,b)))}),q(C),!1):void 0}function o(f){function h(){f.preventDefault(),z=(new Date).getTime(),J.push([z,s]);var g=u-s;C=x-g,C>A?(C=Math.round(C+(A-C)/1.5),P="left"):B>C?(C=Math.round(C+(B-C)/1.5),P="right"):P=!1,w.css(d(C)),c.triggerScrollyeah&&b.trigger("scrollyeah",C),E.each(function(){var b=a(this);b.css(d(e(C,b)))}),j(C,g,P)}g?g&&1==f.targetTouches.length&&(s=f.targetTouches[0][L],t=f.targetTouches[0][M],O?N&&h():(Math.abs(s-u)-Math.abs(t-v)>=-5&&(N=!0,f.preventDefault()),O=!0)):(s=f[L],h())}function r(a){if(!g||!a.targetTouches.length){N=!1,O=!1,g?(w[0].removeEventListener("touchmove",o,!1),w[0].removeEventListener("touchend",r,!1)):(m.unbind("mouseup.scrollyeah",r),m.unbind("mousemove.scrollyeah",o)),G=(new Date).getTime();var b,c,d,e,f=-C,j=G-h;for(i=0;i<J.length;i++)b=Math.abs(j-J[i][0]),0==i&&(c=b,d=G-J[i][0],e=J[i][1]),c>=b&&(c=b,d=J[i][0],e=J[i][1]);var l=e-s,n=l>=0,p=G-d,q=h>=p,t=G-K,u=n===F;k(f,p,q,t,u,l,a),K=G,F=n}}var s,t,u,v,x,y,z,F,G,H,I,J=[],K=0,N=!1,O=!1,P=!1;g?w[0].addEventListener("touchstart",l,!1):w.mousedown(l).mousewheel(n)}function t(){}function u(c,d){clearTimeout(J),I||(I=!0,w.addClass("scrollyeah__shaft_grabbing")),Math.abs(d)>=5&&!N&&(N=!0,a("a",b).bind("click",f)),q(c)}function v(c,d,g,i,j,l){J=setTimeout(function(){N=!1,a("a",b).unbind("click",f)},h),I=!1,w.removeClass("scrollyeah__shaft_grabbing"),c=-c;var m,n=c,p=2*k;if(c>A)n=A,p/=2;else if(B>c)n=B,p/=2;else if(g){l=-l;var r=l/d;n=Math.round(c+250*r);var s=.04;n>A?(m=Math.abs(n-A),p=Math.abs(p/(250*r/(Math.abs(250*r)-m*(1-s)))),n=A,m=n+m*s):B>n&&(m=Math.abs(n-B),p=Math.abs(p/(250*r/(Math.abs(250*r)-m*(1-s)))),n=B,m=n-m*s)}C=n,n!=c&&(o(w,n,p,m,!1),E.each(function(){var b=a(this);o(b,e(n,b),p,e(m,b),!0)}),q(n))}b.data({ini:!0}).wrapInner('<div class="scrollyeah__wrap"><div class="scrollyeah__shaft"></div></div>');var w=(a(".scrollyeah__wrap",b).css({width:c.maxWidth}),a(".scrollyeah__shaft",b));if(c.shadows){a('<i class="scrollyeah__shadow scrollyeah__shadow_prev"></i><i class="scrollyeah__shadow scrollyeah__shadow_next"></i>').appendTo(b)}var x,y,z,A,B,C=0,D=!0,E=a(".scrollyeah__parallax",w),F=a(".scrollyeah__disable",w);E.each(function(){var b=a(this),c=Number(b.attr("data-parallaxRate"));b.data({parallax:c})});var G,H;r(),l.bind("resize load",r),g&&window.addEventListener("orientationchange",r,!1);var I,J,K="left",L="pageX",M="pageY",N=!1;s(t,u,v),F.bind("click mousedown mouseup mousemove",function(a){a.stopPropagation()}).css({"-webkit-user-select":"auto","-moz-user-select":"auto","-o-user-select":"auto","-ms-user-select":"auto","user-select":"auto",cursor:"auto"})}a.extend({bez:function(b){var c="bez_"+a.makeArray(arguments).join("_").replace(".","p");if("function"!=typeof a.easing[c]){var d=function(a,b){var c=[null,null],d=[null,null],e=[null,null],f=function(f,g){return e[g]=3*a[g],d[g]=3*(b[g]-a[g])-e[g],c[g]=1-e[g]-d[g],f*(e[g]+f*(d[g]+f*c[g]))},g=function(a){return e[0]+a*(2*d[0]+3*c[0]*a)},h=function(a){for(var b,c=a,d=0;++d<14&&(b=f(c,0)-a,!(Math.abs(b)<.001));)c-=b/g(c);return c};return function(a){return f(h(a),1)}};a.easing[c]=function(a,c,e,f,g){return f*d([b[0],b[1]],[b[2],b[3]])(c/g)+e}}return c}});var f=["DOMMouseScroll","mousewheel"];a.event.special.mousewheel={setup:function(){if(this.addEventListener)for(var a=f.length;a;)this.addEventListener(f[--a],b,!1);else this.onmousewheel=b},teardown:function(){if(this.removeEventListener)for(var a=f.length;a;)this.removeEventListener(f[--a],b,!1);else this.onmousewheel=null}},a.fn.extend({mousewheel:function(a){return a?this.bind("mousewheel",a):this.trigger("mousewheel")},unmousewheel:function(a){return this.unbind("mousewheel",a)}});var g="ontouchstart"in document,h=300,j=a.bez([.1,0,.25,1]),k=333,l=a(window),m=a(document),n=[["maxWidth","number",999999],["shadows","boolean",!0],["disableIfFit","boolean",!0],["centerIfFit","boolean",!1],["triggerScrollyeah","boolean",!1]];a.fn.scrollyeah=function(b){"undefined"==typeof scrollyeahDefaults&&(scrollyeahDefaults={});var d=a.extend(c(),a.extend({},scrollyeahDefaults,b));return this.each(function(){var b=a(this);b.data("ini")||e(b,d)}),this},a(function(){a(".scrollyeah").each(function(){var b=a(this);b.scrollyeah(c(b))})})}(jQuery);
$(function () {
	$(document).on('click', '[data-toggle-popup]', function (e) {
		e.preventDefault();
		var togglePopup = $(this).data('toggle-popup');
		$('[data-popup]')
			.hide()
			.filter('[data-popup="' + togglePopup + '"]')
			.show();
	});

	$(document).on('click', '[data-close-popup]', function (e) {
		e.preventDefault();
		$('[data-popup]').hide();
	});


	$(document).on('click', '[data-popup]', function (e) {
		var thisPopup = $(this).data('popup');
		if ($(e.target).hasClass('popup-wrap__content')) {
			$('[data-popup]').hide();
		}
	});

	$(document).on('change', '[data-filter-inputs] input', function (e) {
		if (!$(this).data('select-all')) {
			$(this).parents('[data-filter-inputs]').find('[data-select-all]').prop('checked', false);
		} else {
			console.log('all');
			$(this).parents('[data-filter-inputs]').find('input:not([data-select-all])').prop('checked', false);
		}
	});

	$(document).on('click', '.filters-popup-buttons__button--reset', function (e) {
		e.preventDefault(0);
		$('[data-filter-inputs] [data-select-all]').click();
	})

	new ClipboardJS('.js-copy-promocode');
	$(document).on('click', '.js-copy-promocode', function (e) {
		e.preventDefault();
		alert('ÐÑÐ¾Ð¼Ð¾ÐºÐ¾Ð´ ÑÐºÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°Ð½ Ð² Ð±ÑÑÐµÑ Ð¾Ð±Ð¼ÐµÐ½Ð°');
	});

	if (window.location.hash) {
		var popupHash = window.location.hash.substring(1);
		if ($('[data-ym-id="' + popupHash + '"]').length) {
			$('[data-popup]')
				.hide()
				.filter('[data-ym-id="' + popupHash + '"]')
				.show();
		}
	}
});
$(function () {
	function closeOffersSearch() {
		$('.actions-search').removeClass('actions-search--visible');
		setTimeout(function () {
			$('.actions-search__input').val('');
		}, 300);
	}

	$(document).on('click', '[data-toggle-search]', function (e) {
		e.preventDefault();
		if (!$('.actions-search').hasClass('actions-search--visible')) {
			$('.actions-search').addClass('actions-search--visible');
			setTimeout(function () {
				$('.actions-search input').focus();
			}, 400);
		} else {
			closeOffersSearch();
		}
	});

	$(document).on('click', '[data-close-search]', function (e) {
		e.preventDefault();
		closeOffersSearch();
	});

	$(document).on('click', '.actions-search__button--reset', function (e) {
		e.preventDefault();
		$('.actions-search__input').val('').focus();
		$('.actions-search').removeClass('js-typing');
	})

	$(document).bind('keydown', function (e) {
		if (e.which == 27) {
			closeOffersSearch();
		}
	});

	$(document).on('reset', '.actions-search', function (e) {
		$(this).removeClass('js-typing');
	});

	$(document).on('input change', '.actions-search input', function (e) {
		if ($(this).val().length) {
			if (!$(this).parents('.actions-search').hasClass('js-typing')) {
				$(this).parents('.actions-search').addClass('js-typing');
			}
		} else {
			$(this).parents('.actions-search').removeClass('js-typing');
		}
	});
})
$(function() {
	var $container = $('<div style="width:0;height:0;overflow:hidden"></div>').prependTo(document.body);

	$.get('img/svg/sprite.svg', function (data) {
		$container.append(typeof XMLSerializer != 'undefined'
			? (new XMLSerializer()).serializeToString(data.documentElement)
			: $(data.documentElement).html());
	});
})